/*
 * generated by Xtext 2.9.1
 */
package de.htwg.mdsd.playgenmodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.htwg.mdsd.playgenmodel.playMorphiaModel.MorphiaModel
import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import de.htwg.mdsd.playgenmodel.playMorphiaModel.Attribute
import java.util.Collection
import java.util.HashSet

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PlayMorphiaModelGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (model : resource.allContents.toIterable.filter(MorphiaModel)) {
			fsa.generateFile(model.fullyQualifiedName.toString("/") + ".java", model.compileModel)
			fsa.generateFile(model.fullyQualifiedName.toString("/") + "Dao.java", model.compileDao)
			fsa.generateFile(model.fullyQualifiedName.toString("/") + "Controller.java", model.compileController)
		}
	}

	def compileModel(MorphiaModel model) '''
		package genapi.model;
		
		import org.mongodb.morphia.annotations.Entity;
		import core.model.BasicModel;
		
		@Entity("«model.name.toFirstLower»")
		public class «model.name» extends BasicModel {
			«FOR attribute : model.attributes»
			«attribute.compileAttribute»
			«ENDFOR»
		}
	'''

	def compileAttribute(Attribute attribute) '''
		
			«IF attribute.type instanceof MorphiaModel»
				@TODO: Morphia Annotations
				«ENDIF»
				«IF attribute.many»
					private List<«attribute.type.fullyQualifiedName»> «attribute.name» = new ArrayList<«attribute.type.fullyQualifiedName»>();
					
					public List<«attribute.type.fullyQualifiedName»> get«attribute.name.toFirstUpper»() {
						return this.«attribute.name»;
					}
					
					public void set«attribute.name.toFirstUpper»(List<«attribute.type.fullyQualifiedName»> «attribute.name») {
						this.«attribute.name» = posts;
					}
				«ENDIF»
				«IF !attribute.many»
					private «attribute.type.fullyQualifiedName» «attribute.name»;
					
					public «attribute.type.fullyQualifiedName» get«attribute.name.toFirstUpper»() {
					    return this.«attribute.name»;
					}
					
					public void set«attribute.name.toFirstUpper»(«attribute.type.fullyQualifiedName» «attribute.name») {
					    this.«attribute.name» = «attribute.name»;
					}
				«ENDIF»
		'''

	def compileDao(MorphiaModel model) '''
		package genapi.dao;
		
		import genapi.model.«model.name»;
		import core.dao.BasicDao;
		
		public class «model.name»Dao extends BasicDao<«model.name», String> {}
	'''

	def compileController(MorphiaModel model) '''
		package genapi.controller;
		
		import genapi.dao.«model.name»Dao;
		import genapi.model.«model.name»;
		import org.bson.types.ObjectId;
		import org.mongodb.morphia.query.QueryResults;
		import com.google.inject.Inject;
		import play.mvc.Controller;
		import play.mvc.Result;
		import play.data.FormFactory;
		import play.libs.Json;
		import static play.libs.Json.toJson;
		
		public class «model.name»Controller extends Controller {
			
			@Inject
			FormFactory formFactory;
			
			@Inject
			private «model.name»Dao «model.name.toFirstLower»Dao;
			«model.filterDaoInjects»
			
			public Result create«model.name»() {
				final «model.name» «model.name.toFirstLower» = formFactory.form(«model.name».class).bindFromRequest().get();
				«model.name.toFirstLower».setId(new ObjectId().toString());
				«model.name.toFirstLower»Dao.save(«model.name.toFirstLower»);
				return ok(toJson(«model.name.toFirstLower»));
			}
		
			public Result get«model.name»(String id) {
				final «model.name» «model.name.toFirstLower» = «model.name.toFirstLower»Dao.get(id);
				return ok(toJson(«model.name.toFirstLower»));
			}
		
			public Result getAll«model.name»() {
				QueryResults<«model.name»> queryResults = «model.name.toFirstLower»Dao.find();
				return ok(Json.toJson(queryResults.asList()));
			}
		
			public Result update«model.name»(String id) {
				final «model.name» «model.name.toFirstLower» = formFactory.form(«model.name.toFirstLower».class).bindFromRequest().get();
				if (!«model.name.toFirstLower»Dao.exists(id)) {
					return notFound();
				}
				«model.name.toFirstLower».setId(id);
				«model.name.toFirstLower»Dao.save(«model.name.toFirstLower»);
				return ok(toJson(«model.name.toFirstLower»));
			}
		
			public Result delete«model.name»(String id) {
				«model.name.toFirstLower»Dao.deleteById(id);
				return ok(Json.toJson(id));
			}
			
			«FOR attribute : model.attributes»
				«IF attribute.type instanceof MorphiaModel»
					«IF attribute.many»
						public Result addTo«attribute.name.toFirstUpper»(String «model.name.toFirstLower»Id, String «attribute.name»Id) {
							final «attribute.type.fullyQualifiedName» entityToAdd = «attribute.type.name.toFirstLower»Dao.get(«attribute.name»Id);
							final Query<«model.fullyQualifiedName»> query = DBWrapper.datastore.createQuery(«model.fullyQualifiedName».class).filter("_id ==", «model.name.toFirstLower»Id);
							final UpdateOperations<«model.fullyQualifiedName»> operations = DBWrapper.datastore.createUpdateOperations(«model.fullyQualifiedName».class).add("«attribute.name»", entityToAdd);
							DBWrapper.datastore.update(query, operations);
							return ok(Json.toJson(entityToAdd));
						}
						
						public Result removeFrom«attribute.name.toFirstUpper»(String «model.name.toFirstLower», String «attribute.name»Id) {
							final «attribute.type.fullyQualifiedName» entityToRemove = «attribute.type.name.toFirstLower»Dao.get(«attribute.name»Id);
							final Query<«model.fullyQualifiedName»> query = DBWrapper.datastore.createQuery(«model.fullyQualifiedName».class).filter("_id ==", «model.name.toFirstLower»Id);
							final UpdateOperations<«model.fullyQualifiedName»> operations = DBWrapper.datastore.createUpdateOperations(«model.fullyQualifiedName».class).removeAll("«attribute.name»", entityToRemove);
							DBWrapper.datastore.update(query, operations);
							return ok(Json.toJson(«attribute.name»Id));
						}
					«ENDIF»
				«ENDIF»
			«ENDFOR»
			
		}
	'''
	
	def filterDaoInjects(MorphiaModel model) {
		val daosToInject = newHashSet()
		for(Attribute attribute : model.attributes.filter[it.type instanceof MorphiaModel && it.many]) {
			daosToInject.add(attribute.type.name)
		}
		compileDaoInjects(daosToInject)
	}
	
	def compileDaoInjects(HashSet<String> names) '''
		«FOR name : names»
		
			@Inject 
			private «name»Dao «name.toFirstLower»Dao;
		«ENDFOR»
	'''
}
