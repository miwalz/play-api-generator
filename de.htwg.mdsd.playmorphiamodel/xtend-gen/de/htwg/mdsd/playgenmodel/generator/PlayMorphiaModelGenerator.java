/**
 * generated by Xtext 2.9.1
 */
package de.htwg.mdsd.playgenmodel.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import de.htwg.mdsd.playgenmodel.playMorphiaModel.Attribute;
import de.htwg.mdsd.playgenmodel.playMorphiaModel.MorphiaModel;
import de.htwg.mdsd.playgenmodel.playMorphiaModel.Type;
import java.util.HashSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PlayMorphiaModelGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<MorphiaModel> _filter = Iterables.<MorphiaModel>filter(_iterable, MorphiaModel.class);
    for (final MorphiaModel model : _filter) {
      {
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(model);
        String _string = _fullyQualifiedName.toString("/");
        String _plus = (_string + ".java");
        CharSequence _compileModel = this.compileModel(model);
        fsa.generateFile(_plus, _compileModel);
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
        String _string_1 = _fullyQualifiedName_1.toString("/");
        String _plus_1 = (_string_1 + "Dao.java");
        CharSequence _compileDao = this.compileDao(model);
        fsa.generateFile(_plus_1, _compileDao);
        QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
        String _string_2 = _fullyQualifiedName_2.toString("/");
        String _plus_2 = (_string_2 + "Controller.java");
        CharSequence _compileController = this.compileController(model);
        fsa.generateFile(_plus_2, _compileController);
      }
    }
  }
  
  public CharSequence compileModel(final MorphiaModel model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package genapi.model;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.mongodb.morphia.annotations.Entity;");
    _builder.newLine();
    _builder.append("import core.model.BasicModel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Entity(\"");
    String _name = model.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    String _name_1 = model.getName();
    _builder.append(_name_1, "");
    _builder.append(" extends BasicModel {");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = model.getAttributes();
      for(final Attribute attribute : _attributes) {
        _builder.append("\t");
        CharSequence _compileAttribute = this.compileAttribute(attribute);
        _builder.append(_compileAttribute, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileAttribute(final Attribute attribute) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      Type _type = attribute.getType();
      if ((_type instanceof MorphiaModel)) {
        _builder.append("\t");
        _builder.append("@TODO: Morphia Annotations");
        _builder.newLine();
      }
    }
    {
      boolean _isMany = attribute.isMany();
      if (_isMany) {
        _builder.append("\t\t");
        _builder.append("private List<");
        Type _type_1 = attribute.getType();
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_type_1);
        _builder.append(_fullyQualifiedName, "\t\t");
        _builder.append("> ");
        String _name = attribute.getName();
        _builder.append(_name, "\t\t");
        _builder.append(" = new ArrayList<");
        Type _type_2 = attribute.getType();
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_2);
        _builder.append(_fullyQualifiedName_1, "\t\t");
        _builder.append(">();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("public List<");
        Type _type_3 = attribute.getType();
        QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_3);
        _builder.append(_fullyQualifiedName_2, "\t\t");
        _builder.append("> get");
        String _name_1 = attribute.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_1);
        _builder.append(_firstUpper, "\t\t");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("return this.");
        String _name_2 = attribute.getName();
        _builder.append(_name_2, "\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("public void set");
        String _name_3 = attribute.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_3);
        _builder.append(_firstUpper_1, "\t\t");
        _builder.append("(List<");
        Type _type_4 = attribute.getType();
        QualifiedName _fullyQualifiedName_3 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_4);
        _builder.append(_fullyQualifiedName_3, "\t\t");
        _builder.append("> ");
        String _name_4 = attribute.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("this.");
        String _name_5 = attribute.getName();
        _builder.append(_name_5, "\t\t\t");
        _builder.append(" = posts;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      boolean _isMany_1 = attribute.isMany();
      boolean _not = (!_isMany_1);
      if (_not) {
        _builder.append("\t\t");
        _builder.append("private ");
        Type _type_5 = attribute.getType();
        QualifiedName _fullyQualifiedName_4 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_5);
        _builder.append(_fullyQualifiedName_4, "\t\t");
        _builder.append(" ");
        String _name_6 = attribute.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("public ");
        Type _type_6 = attribute.getType();
        QualifiedName _fullyQualifiedName_5 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_6);
        _builder.append(_fullyQualifiedName_5, "\t\t");
        _builder.append(" get");
        String _name_7 = attribute.getName();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_name_7);
        _builder.append(_firstUpper_2, "\t\t");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("    ");
        _builder.append("return this.");
        String _name_8 = attribute.getName();
        _builder.append(_name_8, "\t\t    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("public void set");
        String _name_9 = attribute.getName();
        String _firstUpper_3 = StringExtensions.toFirstUpper(_name_9);
        _builder.append(_firstUpper_3, "\t\t");
        _builder.append("(");
        Type _type_7 = attribute.getType();
        QualifiedName _fullyQualifiedName_6 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_7);
        _builder.append(_fullyQualifiedName_6, "\t\t");
        _builder.append(" ");
        String _name_10 = attribute.getName();
        _builder.append(_name_10, "\t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("    ");
        _builder.append("this.");
        String _name_11 = attribute.getName();
        _builder.append(_name_11, "\t\t    ");
        _builder.append(" = ");
        String _name_12 = attribute.getName();
        _builder.append(_name_12, "\t\t    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileDao(final MorphiaModel model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package genapi.dao;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import genapi.model.");
    String _name = model.getName();
    _builder.append(_name, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import core.dao.BasicDao;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = model.getName();
    _builder.append(_name_1, "");
    _builder.append("Dao extends BasicDao<");
    String _name_2 = model.getName();
    _builder.append(_name_2, "");
    _builder.append(", String> {}");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileController(final MorphiaModel model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package genapi.controller;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import genapi.dao.");
    String _name = model.getName();
    _builder.append(_name, "");
    _builder.append("Dao;");
    _builder.newLineIfNotEmpty();
    _builder.append("import genapi.model.");
    String _name_1 = model.getName();
    _builder.append(_name_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.bson.types.ObjectId;");
    _builder.newLine();
    _builder.append("import org.mongodb.morphia.query.QueryResults;");
    _builder.newLine();
    _builder.append("import com.google.inject.Inject;");
    _builder.newLine();
    _builder.append("import play.mvc.Controller;");
    _builder.newLine();
    _builder.append("import play.mvc.Result;");
    _builder.newLine();
    _builder.append("import play.data.FormFactory;");
    _builder.newLine();
    _builder.append("import play.libs.Json;");
    _builder.newLine();
    _builder.append("import static play.libs.Json.toJson;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name_2 = model.getName();
    _builder.append(_name_2, "");
    _builder.append("Controller extends Controller {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("FormFactory formFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _name_3 = model.getName();
    _builder.append(_name_3, "\t");
    _builder.append("Dao ");
    String _name_4 = model.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_4);
    _builder.append(_firstLower, "\t");
    _builder.append("Dao;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _filterDaoInjects = this.filterDaoInjects(model);
    _builder.append(_filterDaoInjects, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Result create");
    String _name_5 = model.getName();
    _builder.append(_name_5, "\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("final ");
    String _name_6 = model.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(" ");
    String _name_7 = model.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_1, "\t\t");
    _builder.append(" = formFactory.form(");
    String _name_8 = model.getName();
    _builder.append(_name_8, "\t\t");
    _builder.append(".class).bindFromRequest().get();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_9 = model.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_9);
    _builder.append(_firstLower_2, "\t\t");
    _builder.append(".setId(new ObjectId().toString());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_10 = model.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_10);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append("Dao.save(");
    String _name_11 = model.getName();
    String _firstLower_4 = StringExtensions.toFirstLower(_name_11);
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ok(toJson(");
    String _name_12 = model.getName();
    String _firstLower_5 = StringExtensions.toFirstLower(_name_12);
    _builder.append(_firstLower_5, "\t\t");
    _builder.append("));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Result get");
    String _name_13 = model.getName();
    _builder.append(_name_13, "\t");
    _builder.append("(String id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("final ");
    String _name_14 = model.getName();
    _builder.append(_name_14, "\t\t");
    _builder.append(" ");
    String _name_15 = model.getName();
    String _firstLower_6 = StringExtensions.toFirstLower(_name_15);
    _builder.append(_firstLower_6, "\t\t");
    _builder.append(" = ");
    String _name_16 = model.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_16);
    _builder.append(_firstLower_7, "\t\t");
    _builder.append("Dao.get(id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ok(toJson(");
    String _name_17 = model.getName();
    String _firstLower_8 = StringExtensions.toFirstLower(_name_17);
    _builder.append(_firstLower_8, "\t\t");
    _builder.append("));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Result getAll");
    String _name_18 = model.getName();
    _builder.append(_name_18, "\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("QueryResults<");
    String _name_19 = model.getName();
    _builder.append(_name_19, "\t\t");
    _builder.append("> queryResults = ");
    String _name_20 = model.getName();
    String _firstLower_9 = StringExtensions.toFirstLower(_name_20);
    _builder.append(_firstLower_9, "\t\t");
    _builder.append("Dao.find();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ok(Json.toJson(queryResults.asList()));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Result update");
    String _name_21 = model.getName();
    _builder.append(_name_21, "\t");
    _builder.append("(String id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("final ");
    String _name_22 = model.getName();
    _builder.append(_name_22, "\t\t");
    _builder.append(" ");
    String _name_23 = model.getName();
    String _firstLower_10 = StringExtensions.toFirstLower(_name_23);
    _builder.append(_firstLower_10, "\t\t");
    _builder.append(" = formFactory.form(");
    String _name_24 = model.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_24);
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(".class).bindFromRequest().get();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (!");
    String _name_25 = model.getName();
    String _firstLower_12 = StringExtensions.toFirstLower(_name_25);
    _builder.append(_firstLower_12, "\t\t");
    _builder.append("Dao.exists(id)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return notFound();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_26 = model.getName();
    String _firstLower_13 = StringExtensions.toFirstLower(_name_26);
    _builder.append(_firstLower_13, "\t\t");
    _builder.append(".setId(id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_27 = model.getName();
    String _firstLower_14 = StringExtensions.toFirstLower(_name_27);
    _builder.append(_firstLower_14, "\t\t");
    _builder.append("Dao.save(");
    String _name_28 = model.getName();
    String _firstLower_15 = StringExtensions.toFirstLower(_name_28);
    _builder.append(_firstLower_15, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ok(toJson(");
    String _name_29 = model.getName();
    String _firstLower_16 = StringExtensions.toFirstLower(_name_29);
    _builder.append(_firstLower_16, "\t\t");
    _builder.append("));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Result delete");
    String _name_30 = model.getName();
    _builder.append(_name_30, "\t");
    _builder.append("(String id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_31 = model.getName();
    String _firstLower_17 = StringExtensions.toFirstLower(_name_31);
    _builder.append(_firstLower_17, "\t\t");
    _builder.append("Dao.deleteById(id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ok(Json.toJson(id));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Attribute> _attributes = model.getAttributes();
      for(final Attribute attribute : _attributes) {
        {
          Type _type = attribute.getType();
          if ((_type instanceof MorphiaModel)) {
            {
              boolean _isMany = attribute.isMany();
              if (_isMany) {
                _builder.append("\t");
                _builder.append("public Result addTo");
                String _name_32 = attribute.getName();
                String _firstUpper = StringExtensions.toFirstUpper(_name_32);
                _builder.append(_firstUpper, "\t");
                _builder.append("(String ");
                String _name_33 = model.getName();
                String _firstLower_18 = StringExtensions.toFirstLower(_name_33);
                _builder.append(_firstLower_18, "\t");
                _builder.append("Id, String ");
                String _name_34 = attribute.getName();
                _builder.append(_name_34, "\t");
                _builder.append("Id) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("final ");
                Type _type_1 = attribute.getType();
                QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_type_1);
                _builder.append(_fullyQualifiedName, "\t\t");
                _builder.append(" entityToAdd = ");
                Type _type_2 = attribute.getType();
                String _name_35 = _type_2.getName();
                String _firstLower_19 = StringExtensions.toFirstLower(_name_35);
                _builder.append(_firstLower_19, "\t\t");
                _builder.append("Dao.get(");
                String _name_36 = attribute.getName();
                _builder.append(_name_36, "\t\t");
                _builder.append("Id);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("final Query<");
                QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
                _builder.append(_fullyQualifiedName_1, "\t\t");
                _builder.append("> query = DBWrapper.datastore.createQuery(");
                QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
                _builder.append(_fullyQualifiedName_2, "\t\t");
                _builder.append(".class).filter(\"_id ==\", ");
                String _name_37 = model.getName();
                String _firstLower_20 = StringExtensions.toFirstLower(_name_37);
                _builder.append(_firstLower_20, "\t\t");
                _builder.append("Id);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("final UpdateOperations<");
                QualifiedName _fullyQualifiedName_3 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
                _builder.append(_fullyQualifiedName_3, "\t\t");
                _builder.append("> operations = DBWrapper.datastore.createUpdateOperations(");
                QualifiedName _fullyQualifiedName_4 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
                _builder.append(_fullyQualifiedName_4, "\t\t");
                _builder.append(".class).add(\"");
                String _name_38 = attribute.getName();
                _builder.append(_name_38, "\t\t");
                _builder.append("\", entityToAdd);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("DBWrapper.datastore.update(query, operations);");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("return ok(Json.toJson(entityToAdd));");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("public Result removeFrom");
                String _name_39 = attribute.getName();
                String _firstUpper_1 = StringExtensions.toFirstUpper(_name_39);
                _builder.append(_firstUpper_1, "\t");
                _builder.append("(String ");
                String _name_40 = model.getName();
                String _firstLower_21 = StringExtensions.toFirstLower(_name_40);
                _builder.append(_firstLower_21, "\t");
                _builder.append(", String ");
                String _name_41 = attribute.getName();
                _builder.append(_name_41, "\t");
                _builder.append("Id) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("final ");
                Type _type_3 = attribute.getType();
                QualifiedName _fullyQualifiedName_5 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_3);
                _builder.append(_fullyQualifiedName_5, "\t\t");
                _builder.append(" entityToRemove = ");
                Type _type_4 = attribute.getType();
                String _name_42 = _type_4.getName();
                String _firstLower_22 = StringExtensions.toFirstLower(_name_42);
                _builder.append(_firstLower_22, "\t\t");
                _builder.append("Dao.get(");
                String _name_43 = attribute.getName();
                _builder.append(_name_43, "\t\t");
                _builder.append("Id);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("final Query<");
                QualifiedName _fullyQualifiedName_6 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
                _builder.append(_fullyQualifiedName_6, "\t\t");
                _builder.append("> query = DBWrapper.datastore.createQuery(");
                QualifiedName _fullyQualifiedName_7 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
                _builder.append(_fullyQualifiedName_7, "\t\t");
                _builder.append(".class).filter(\"_id ==\", ");
                String _name_44 = model.getName();
                String _firstLower_23 = StringExtensions.toFirstLower(_name_44);
                _builder.append(_firstLower_23, "\t\t");
                _builder.append("Id);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("final UpdateOperations<");
                QualifiedName _fullyQualifiedName_8 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
                _builder.append(_fullyQualifiedName_8, "\t\t");
                _builder.append("> operations = DBWrapper.datastore.createUpdateOperations(");
                QualifiedName _fullyQualifiedName_9 = this._iQualifiedNameProvider.getFullyQualifiedName(model);
                _builder.append(_fullyQualifiedName_9, "\t\t");
                _builder.append(".class).removeAll(\"");
                String _name_45 = attribute.getName();
                _builder.append(_name_45, "\t\t");
                _builder.append("\", entityToRemove);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("DBWrapper.datastore.update(query, operations);");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("return ok(Json.toJson(");
                String _name_46 = attribute.getName();
                _builder.append(_name_46, "\t\t");
                _builder.append("Id));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence filterDaoInjects(final MorphiaModel model) {
    CharSequence _xblockexpression = null;
    {
      final HashSet<String> daosToInject = CollectionLiterals.<String>newHashSet();
      EList<Attribute> _attributes = model.getAttributes();
      final Function1<Attribute, Boolean> _function = (Attribute it) -> {
        boolean _and = false;
        Type _type = it.getType();
        if (!(_type instanceof MorphiaModel)) {
          _and = false;
        } else {
          boolean _isMany = it.isMany();
          _and = _isMany;
        }
        return Boolean.valueOf(_and);
      };
      Iterable<Attribute> _filter = IterableExtensions.<Attribute>filter(_attributes, _function);
      for (final Attribute attribute : _filter) {
        Type _type = attribute.getType();
        String _name = _type.getName();
        daosToInject.add(_name);
      }
      _xblockexpression = this.compileDaoInjects(daosToInject);
    }
    return _xblockexpression;
  }
  
  public CharSequence compileDaoInjects(final HashSet<String> names) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final String name : names) {
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Inject ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private ");
        _builder.append(name, "\t");
        _builder.append("Dao ");
        String _firstLower = StringExtensions.toFirstLower(name);
        _builder.append(_firstLower, "\t");
        _builder.append("Dao;");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
}
